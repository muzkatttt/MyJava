package ru.lesson3;

public class Orange {

    private Juice juice;

    // внутренние классы создаются внутри другого класса

    // Композиция - связь объектов и классов,
    // в которой  у внутренних классов вызываются нужные нам методы
    // внутренний класс реализует композицию
    // с использованием внутренних классов инкапсуляция увеличивается


    /**
     * Особенности внутренних классов:
     *  - внутренний объект не существует без внешнего;
     *  - внутренний имеет доступ ко всему внешнему;
     *  - внешний не имеет доступа ко внутреннему без создания объекта
     *  - у внутренних классов есть модификаторы домтупа
     *  - внутренний класс не может иметь имя внешнего класса;
     *  - во внутреннем класс не может иметь не -final статические полы
     *   - объект внутреннго класса нльзя создать в статическом методе
     *   "внешнего" класса
     *   - со внутренними классами работает наследование и полиморфизм
     */


    public Orange() {
        this.juice = juice;
    }
    public void squeezeJuice() {
        System.out.println("Squeeze Juice ...");
        juice.flow();
    }

    private class Juice {
        public void flow() {
            System.out.println("Juice dripped ...");
        }
    }
    /**
     * Особенности локальных классов (подвид внутреннего класса) смотри пример класс Animal
     * - локальный класс может создаваться внутри метода другого класса
     * - сохраняет доступ ко всем полям и методам внешнего класса, если их значение не изменяется после инициализации
     *   (начиная с Java 8)
     *  - имеют ссылку на окружающий экземпляр
     *
     */


    public class Animal{
        void performBehavior(boolean state) {
            class Brain {
                void sleep() {
                    if (state) {
                        System.out.println("Sleeping");
                    } else {
                        System.out.println("Not sleeping");
                    }
                }
            }
            Brain brain = new Brain();
            brain.sleep();
        }
    }

}
